1 优先从缓存中加载
模块再第一次加载后会被缓存，这也意味着多次调用require()不会导致模块的代码被执行多次。
注意：不论是内置模块，用户自定义模块，还是第三方模块，他们都会优先从缓存中湾仔，从而提高模块的加载效率

2 内置模块的加载
内置模块是指NodeJS官方提供的模块，内置模块的加载优先级最高
例如下载了一个fs第三方包，写require("fs")的时候引入的实际上是系统模块

3 自定义模块的加载机制
使用require()加载自定义模块时，必须指定以./和../开头的路径标识符，
在加载自定义模块时，如果没有指定./或../这样的路径标识符，则node会把他当作内置模块或第三方模块进行加载。
如果引入自定义模块时省略了文件的扩展名，则按照以下顺序处理：
按照此文件名加载
补全.js后缀
补全.json后缀
补全.node后缀
加载失败

4 第三方模块加载机制
如果传递给 require() 的模块标识符不是一个内置模块 也没有./作为开头，
则nodejs会从当前模块的父目录开始，尝试从/node_modules文件夹中加载第三方模块
如果没有找到对应的第三方模块，则移动到再上一层父目录中，在进行加载，直到文件系统的根目录

5 目录作为模块
把目录作为模块标识符，传递给require()进行加载，有三种方式：
在被加载的目录下查找一个package.json的文件，并寻找main属性，作为require()加载的入口
如果目录里没有package.json文件，或者main入口不存在或无法解析，则nodejs将会试图加载目录下的index.js文件
如果以上两部都失败，则nodejs会在终端打印错误消息，报告缺失。

